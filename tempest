#!/usr/bin/env ruby
# tempest - log and present WeatherFlow Tempest weather station data
# Andrew Ho (andrew@zeuscat.com)
#
# Tempest API docs: https://weatherflow.github.io/Tempest/api/udp/v143/
#
# On a host protected by iptables, you may need to allow UDP broadcast:
# iptables -I INPUT -p udp -m pkttype --pkt-type broadcast -j ACCEPT
#
# TODO: support wind speed and direction
# TODO: support lightning strikes
# TODO: should pass through source (serial number, IP address)
# TODO: need to add a lot of error checking
#
# Copyright 2021-2022 Andrew Ho
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

require 'optparse'
require 'logger'
require 'socket'
require 'json'

ME = File.basename($0)
USAGE = "usage: #{ME} [-h] [-v] [-x] [-t sec] [-o log] [-d data] [-s state]\n"
FULL_USAGE = USAGE + <<'end'
    -h                display this help text and exit
    -v, --verbose     verbose mode, log extra information
    -x, --debug       debug mode, run in foreground
    -o, --logfile     write log messages to this file (default stderr)
    -d, --datafile    write tab-separated data to this file (default stdout)
    -s, --statefile   atomically update this file with current state as JSON
end

PRECIPITATION_TYPE = ['None', 'Rain', 'Hail']

# Main loop, run at end of file
def main(argv)
  # Parse command line arguments
  orig_argv = argv.dup
  verbose = false
  debug = false
  logfile = nil      # write log messages (logger output) to this file
  datafile = nil     # write tab-separated (timeseries) data to this file
  statefile = nil    # atomically update this file with current state as JSON
    OptionParser.new do |opts|
    opts.on('-h', '--help')    { puts FULL_USAGE; exit 0 }
    opts.on('-v', '--verbose') { verbose = true }
    opts.on('-x', '--debug')   { debug = true }
    opts.on('-o', '--logfile=LOG')     { |str| logfile = str }
    opts.on('-d', '--datafile=DATA')   { |str| datafile = str }
    opts.on('-s', '--statefile=STATE') { |str| statefile = str }
    begin
      opts.parse!(argv)
    rescue OptionParser::InvalidOption => e
      abort "#{ME}: #{e}\n#{USAGE}"
    end
  end

  # Set up diagnostic logging
  logger = Logger.new((debug || logfile.nil?) ? $stderr :
                      logfile == '-' ? $stdout :
                      logfile)
  logger.level = verbose ? Logger::DEBUG : Logger::INFO
  logger.info("#{ME} starting up: #{ME} #{orig_argv.join(' ')}")

  # Set up tab-separated timeseries data output stream
  datastream = datafile && datafile != '-' ? open(datafile, 'a') : $stdout

  # Get absolute path to statefile, since daemonizing does chdir()
  statefile = File.expand_path(statefile) if statefile

  # Daemonize, unless in debug mode
  if debug
    logger.info("running in foreground (#{Process.pid})")
  else
    logger.debug('daemonize()')
    daemonize
    logger.info("daemonized (#{Process.pid})")
  end

  # Main loop
  status = 0
  begin
    tempest = Tempest::Client.new(logger)
    while true
      event = tempest.read_event
      logger.debug("event = #{event.inspect}")

      # TODO: handle other types of events
      # TODO: handle missing data
      if event['type'] == 'obs_st' && event['air_temperature_c']
        begin
          last_updated = event['time_epoch_s']
          temp_f = celsius_to_fahrenheit(event['air_temperature_c'])
          humidity = event['relative_humidity_pct'].round(1)
          uv_index = event['uv_index']
          solar_radiation = event['solar_radiation_wpm2']
          precipitation_in = mm_to_in(event['precipitation_accumulated_mm'])
          precipitation_type = PRECIPITATION_TYPE[event['precipitation_type']]
          battery_volts = event['battery_volts'].round(2)
        rescue Exception => e
          logger.error("uncaught exception: #{e}, event = #{event.inspect}")
          return
        end

        # Write tab-separated timeseries data
        timestamp = Time.at(last_updated).strftime('%Y-%m-%dT%H:%M:%S')
        columns = [ timestamp, temp_f, humidity, uv_index, solar_radiation,
                    precipitation_in, precipitation_type, battery_volts ]
        logger.debug(columns.inspect)
        datastream.puts(columns.join("\t"))
        datastream.flush

        # Record current state in JSON format
        state = {
          last_updated: last_updated,
          temperature: temp_f,
          humidity: humidity,
          uv_index: uv_index,
          solar_radiation: solar_radiation,
          precipitation: precipitation_in,
          battery_voltage: battery_volts,
        }
        if precipitation_type != 'None'
          state['precipitation_type'] = precipitation_type
        end
        logger.debug(state.inspect)
        if statefile
          atomic_write(statefile) do |fh|
            logger.debug("tmpfile = #{fh.path.inspect}")
            fh.puts(JSON.pretty_generate(state))
          end
        end
      end
    end

  # Exit cleanly on usual termination signals
  rescue Interrupt => e
    logger.debug("Interrupt(#{e.message})")
    logger.info('exiting cleanly on interrupt')
    status = 0
  rescue SignalException => e
    logger.debug("SignalException(#{e.message})")
    if e.message == 'SIGINT' || e.message == 'SIGTERM'
      logger.info("exiting cleanly on #{e.message}")
      status = 0
    end

  # Log and exit with non-zero status on uncaught exceptions
  rescue Exception => e
    logger.error("uncaught exception:\n#{e.message}, backtrace:\n" +
                 e.backtrace.map { |s| "    #{s}" }.join("\n"))
    status = 1
  end

  logger.info("exiting with status #{status.inspect}")
  status
end

module Tempest
  # An event reported by the Tempest base station.
  class Event
    # Map event name to human readable description, which event field holds
    # the actual observation data, and field names for the observation fields.
    # At least one observation type (obs_st) has an array containing an array
    # with the data; flatten such a doubled array if doubled_array is true.
    # For debug events, passthrough_all means copy all fields as is.
    METADATA = {
      evt_precip: {
        description: 'Rain Start',
        observation_field: 'evt',
        fields: ['time_epoch_s'],
      },
      evt_strike: {
        description: 'Lightning Strike',
        observation_field: 'evt',
        fields: ['time_epoch_s', 'distance_km', 'energy'],
      },
      rapid_wind: {
        description: 'Rapid Wind',
        observation_field: 'ob',
        fields: ['time_epoch_s', 'wind_speed_mps', 'wind_direction_degrees'],
      },
      obs_air: {
        description: 'Observation (Air)',
        observation_field: 'obs',
        fields: [
          'time_epoch_s',
          'station_pressure_mb',
          'air_temperature_c',
          'relative_humidity_pct',
          'lightning_strike_count',
          'lightning_strike_avg_distance_km',
          'battery_volts',
          'report_interval_min',
        ],
      },
      obs_sky: {
        description: 'Observation (Sky)',
        observation_field: 'obs',
        fields: [
          'time_epoch_s',
          'illuminance_lux',
          'uv_index',
          'rain_accumulated_mm',
          'wind_lull_mps',
          'wind_avg_mps',
          'wind_gust_mps',
          'wind_direction_degrees',
          'battery_volts',
          'report_interval_min',
          'solar_radiation_wpm2',
          'local_day_rain_accumulation_mm',
          'precipitation_type',
          'wind_sample_interval_s',
        ],
      },
      obs_st: {
        description: 'Observation (Tempest)',
        observation_field: 'obs',
        double_array: true,
        fields: [
          'time_epoch_s',
          'wind_lull_mps',
          'wind_avg_mps',
          'wind_gust_mps',
          'wind_direction_degrees',
          'wind_sample_interval_s',
          'station_pressure_mb',
          'air_temperature_c',
          'relative_humidity_pct',
          'illuminance_lux',
          'uv_index',
          'solar_radiation_wpm2',
          'precipitation_accumulated_mm',  # TODO: same as rain_accumulated_mm?
          'precipitation_type',
          'lightning_strike_avg_distance_km',
          'lightning_strike_count',
          'battery_volts',
          'report_interval_min',
        ],
      },
      device_status: {
        description: 'Status (device)',
        passthrough_all: true,
      },
      hub_status: {
        description: 'Status (hub)',
        passthrough_all: true,
      },
    }

    # Translate a raw event data packet to a hash with more meaningful names
    # and values (for example, obsevation name/value pairs instead of arrays
    # of indexed observation values).
    def self.from(logger, event)
      type = event['type']
      metadata = METADATA[type.to_sym]
      retval = {}
      retval['type'] = type
      retval['description'] = metadata[:description]
      observation_field = metadata[:observation_field]
      if observation_field && event[observation_field]
        observations = event[observation_field]
        observations = observations[0] if metadata[:double_array]
        observations.each_with_index do |value, i|
          name = metadata[:fields][i]
          retval[name] = value
        end
      end
      if metadata[:passthrough_all]
        event.each do |name, value|
          retval[name] ||= value
        end
      end

      # TODO: remove this debug line after we figure out weird observation bug
      if retval['type'] == 'obs_st' && !retval['air_temperature_c'] && logger
        logger.error("obs_st without air_temperature_c: #{event.inspect}, -> #{retval.inspect}")
      end

      retval
    end
  end

  # A network client to read events from the Tempest base station.
  class Client
    DEFAULT_PORT = 50222
    MAXLEN_BYTES = 65536

    attr_reader :ipaddr
    attr_reader :port
    attr_reader :socket
    attr_reader :logger

    def initialize(logger, ipaddr = '', port = DEFAULT_PORT)
      @ipaddr = ipaddr
      @port = port
      @socket = UDPSocket.new
      @socket.bind(@ipaddr, @port)
      @logger = logger
    end

    def read_event
      message, sender = @socket.recvfrom(MAXLEN_BYTES)
      event = JSON.parse(message)
      Tempest::Event.from(@logger, event)
    end
  end
end

# Daemonize
def daemonize
  exit!(0) if fork
  Process::setsid
  exit!(0) if fork
  Dir::chdir('/var/tmp')
  File::umask(0)
  $stdin.reopen('/dev/null')
  $stdout.reopen('/dev/null', 'w')
  $stderr.reopen('/dev/null', 'w')
end

# Convert degrees Celsius to degrees Fahrenheit
def celsius_to_fahrenheit(n)
  ((n * (9.0 / 5.0)) + 32.0).round(1)
end

# Convert millimeters to inches
def mm_to_in(n)
  (n / 25.4).round(1)
end

# Write to a file atomically by writing to tempfile and calling rename()
def atomic_write(filename)
  # Generate probably-unique temporary filename, preserving extension
  dir = File.dirname(filename)
  extension = File.extname(filename)
  basename = File.basename(filename, extension)
  nonce = "#{Process.pid}_#{Time.now.strftime('%s%L')}_#{rand(1000000)}"
  tmpfile = File.join(dir, "#{basename}.#{nonce}#{extension}")

  File.open(tmpfile, 'w') do |fh|
    retval = yield(fh)
    fh.close

    # Try to match old file permissions, if any
    begin
      old_stat = File.stat(filename)
    rescue Errno::ENOENT
    end
    if old_stat
      begin
        File.chown(old_stat.uid, old_stat.gid, fh.path)
        File.chmod(old_stat.mode, fh.path)
      rescue Errno::EPERM, Errno::EACCES
      end
    end

    # Atomically overwrite previous file, if any
    File.rename(fh.path, filename)
    retval
  end
end

# Run main loop and exit
exit main(ARGV)
